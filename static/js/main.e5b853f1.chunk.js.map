{"version":3,"sources":["serviceWorker.js","Login.js","index.js"],"names":["Boolean","window","location","hostname","match","Login","class","id","type","name","checked","for","data-type","value","href","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCC0BSC,G,6KArCP,OACI,yBAAKC,MAAM,aACP,yBAAKA,MAAM,cAEP,2BAAOC,GAAG,QAAOC,KAAM,QAAQC,KAAK,MAAMH,MAAM,UAAUI,SAAO,IAAG,2BAAOC,IAAI,QAAQL,MAAM,OAAzB,WACpE,2BAAOC,GAAG,QAAQC,KAAK,QAAQC,KAAK,MAAMH,MAAM,YAAW,2BAAOK,IAAI,QAAQL,MAAM,OAAzB,WAC3D,yBAAKA,MAAM,cACP,yBAAKA,MAAM,SACX,2BAAOK,IAAI,OAAOL,MAAM,SAAxB,YACA,2BAAOC,GAAG,OAAOC,KAAK,OAAOF,MAAM,WAEnC,yBAAKA,MAAM,SACX,2BAAOK,IAAI,OAAOL,MAAM,SAAxB,YACA,2BAAOC,GAAG,OAAOC,KAAK,WAAWF,MAAM,QAAQM,YAAU,cAEzD,yBAAKN,MAAM,SACX,2BAAOC,GAAG,QAAQC,KAAK,WAAWF,MAAM,QAAQI,SAAO,IACvD,2BAAOC,IAAI,SAAQ,0BAAML,MAAM,SAA/B,uBAEA,yBAAKA,MAAM,SACX,2BAAOE,KAAK,SAASF,MAAM,SAASO,MAAM,aAE1C,yBAAKP,MAAM,OACX,yBAAKA,MAAM,YAC1B,uBAAGQ,KAAK,WAAR,4B,GA1BWC,cCOpBC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SFuH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e5b853f1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,{Component} from 'react';\r\nimport './login.css';\r\n \r\n\r\n\r\nclass Login extends Component{\r\n    render(){\r\n        return (\r\n            <div class=\"container\">\r\n                <div class=\"login-html\">\r\n                    \r\n                    <input id=\"tab-1\"type =\"radio\" name=\"tab\" class=\"sign-in\" checked /><label for=\"tab-1\" class=\"tab\">Sign In</label>\r\n                    <input id=\"tab-2\" type=\"radio\" name=\"tab\" class=\"sign-up\"/><label for=\"tab-2\" class=\"tab\">Sign Up</label>\r\n                    <div class=\"login-form\">\r\n                        <div class=\"group\">\r\n                        <label for=\"user\" class=\"label\">Username</label>\r\n                        <input id=\"user\" type=\"text\" class=\"input\"/>\r\n                        </div>\r\n                        <div class=\"group\">\r\n                        <label for=\"pass\" class=\"label\">Password</label>\r\n                        <input id=\"pass\" type=\"password\" class=\"input\" data-type=\"password\"/>\r\n                        </div>\r\n                        <div class=\"group\">\r\n                        <input id=\"check\" type=\"checkbox\" class=\"check\" checked/>\r\n                        <label for=\"check\"><span class=\"icon\"></span> Keep me Signed in</label>\r\n                        </div>\r\n                        <div class=\"group\">\r\n                        <input type=\"submit\" class=\"button\" value=\"Sign In\"/>\r\n                        </div>\r\n                        <div class=\"hr\"></div>\r\n                        <div class=\"foot-lnk\">\r\n    \t\t\t\t\t<a href=\"#forgot\">Forgot Password?</a>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        );\r\n        \r\n    }\r\n} \r\n\r\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './Login';\n//ReactDOM.render(\n  //<React.StrictMode>\n    //<App />\n  // </React.StrictMode>,\n  //document.getElementById('root')\n//);\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}